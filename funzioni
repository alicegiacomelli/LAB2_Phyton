# Lezione 1 - 27.04

# FUNZIONI 
# mi permettono di operarare azioni 
# def nomefunzione (parametri) 
# parametro = valore che la funzione si aspetta per eseguire determinate azioni  

# funzione
def stampa (n): # stampa nome funzione che do io 
    return n    # : dico che questa funzione mi restituisce n 
# funzione può essere richiamata più volte nello script

# main script 
nome = 'camillo' # assegnazione 
print(stampa(nome)) # stampa a schermo

# esercizio 
def pippo (n): # assegno alla funzione il nome pippo
    return n*2  # pippo mi vale n*2

nome = 'camillo'
nome1 = 'pinguino'
num = 44

print(pippo(nome), pippo(nome1), pippo(num))

# esecizio somma - questa funzione deve restituire la somma tra 2 numeri 
def somma (a, b):
    return a + b
# oppure
def somma (a, b):
    s = a + b
    return s

num1 = 10
num2 = 6

x = somma(num1, num2) # altra assegnazione, valore restituito dalla funzione 
print(x)

# oppure
print (somma(num1, num2))

# perchè a b e non num1 num2 ???
# se scrivo a e b in shell sono VARIABILI LOCALI e non sono definite, locale nella funzione, parametri interni alla funzione 
# se scrivo num1 e num2 in shell sono VARIABILI GLOBALI, sono definite, posso accerdervi da ogni parte del programma, richiamarle al bisogno
# VARIABILI GLOBALI E LOCALI POSSONO AVERE STESSO NOME !!!!!!


# RETURN o PRINT?
# return valore che ritorno 
# se utilizzo print non devo poi fare print 

def somma (a, b):
    s = a + b
    print (s) # mettere le parentesi 

num1 = 10
num2 = 6
somma(num1, num2) # non devo usare print 

# esercizio: stampa con output 5 + 5 = 10 con format

def somma (a, b):
    s = a + b
    return (s)
num1 = 5
num2 = 5

print('{} + {} = {}'.format(num1, num2, somma(num1, num2)))

# oppure 

def somma (a, b):
    s = a + b
    return (s)
num1 = 5
num2 = 5
x = somma(num1, num2) # assegnazione 
print('{} + {} = {}'.format(num1, num2, x))

# esercizio : stesso procedimento con dati in input

def somma (a, b):
    s = a + b
    return (s)
    
num1 = int(input('Inserire primo numero:')) # aggiungo valori e parametri in shell in modo tale da non cambiare il codice se cambio numeri 
num2 = int(input('Inserire secondo numero: '))

print('{} + {} = {}'.format(num1, num2, somma(num1, num2)))


# Lezione 2 - 28.04

# esercizio: area di un rettangolo
def area (b, h):
    a = b * h
    return (a)

base = 5
altezza = 10
x = area(base, altezza)
print(x)

# esercizio: area del cerchio
# raggio al quadrato per pi

from math import * # richiamare sempre la libreria math a inizio codice 

def area_cer (r):
    area = (r**2) * pi
    return area

raggio = 5
print(area_cer(raggio))

# variabili globali e locali possono avere lo stesso nome !!!!!!

# troncare cifra decimale
x = 78.53981633974483
x = round(x, 5)

# esecizio: funzione con parametri ore, minuti e secondi
# calcolare secondi totali

def secondi_totali(h,m,s):
    sec_tot = (h*3600) + (m*60) + s
    return sec_tot

h = 4
m = 45
s = 15
# print(secondi_totali(h, m, s))
# posso anche dichiarare i valori direttamente
print(secondi_totali(4, 45, 15))

############################# ESECUZIONE CONDIZIONALE 

# procedimento per valutare le condiioni che ci sono tra variabili 
# se voglio sapere se una variabile (valore assegnato a variabile) è maggiore di  un'altra

# if, elif, else
# =
# == per confronti
# >
# <

def num_max (a,b):
    if a > b : # prima condizione
               # fine ogni condizione :
        return a # restituiscimi il valore maggiore
    elif b > a : # seconda condizione
        return b
    elif a == b : # oppure else: senza specificare la condizione
        return False
    
num1 = int(input('Inserire numero 1: '))
num2 = int(input('Inserire numero 2: '))
print(num_max(num1, num2))

# oppure 

num1 = int(input())
num2 = int(input())
print('Il numero maggiore è {}'.format(num_max(num1,num2)))

# esercizio 
# true se numero è pari
# false se numero dispari

def par_dispari(n):
    if n % 2 == 0: # modulo, n diviso 2, non c'è resto
        return True
    else:   # posso anche omettere e mettere solo return False (False e True con lettera maiuscola !!!)
        return False
    
n = input()
print(par_dispari(n))
